#!/bin/bash

namespace=""

# CLI Help
cli_help() {
  cli_name=${0##*/}

  echo "
Usage: $cli_name [command]
Flags:
  get                          runs kubectl command - auto cleans yaml output and decodes secrets
  health, healthcheck          runs healthcheck on namespace defined
  image,images                 lists all images used in a pod or namespace (or all namespaces, by pod)
"
exit 1
}


healthcheck() {
    color='\033[31m'
    nc='\033[0m'

    echo -e "${color}Unhealthy pods:${nc}"
    kubectl get po $namespace --no-headers | grep -Pv '\s+([1-9]+[\d]*)\/\1\s+' | grep -v Completed

    echo -e "${color}Unhealthy applications (deploy,sts,rs,ds,job,cronjob):${nc}"
    # TODO figure out way to check rs,ds,cronjob as well
    kubectl get deploy,sts,job $namespace --no-headers | grep -Pv '\s+([1-9]+[\d]*)\/\1\s+'


    exit 0
}

decode() {
    if [[ $(kubectl $@ | grep "kind: Secret") ]]; then
        kubectl $@ | yq -r '.data | map_values(@base64d)' | sed 's/\\n/\n/g'
        exit 0
    fi
}

neat() {
    kubectl "$@" | yq eval 'del(.metadata.creationTimestamp,
        .metadata.uid,
        .metadata.generation,
        .metadata.ownerReferences,
        .metadata.generateName,
        .metadata.finalizers,
        .spec.progressDeadlineSeconds,
        .spec.revisionHistoryLimit,
        .spec.template.metadata.creationTimestamp,
        .spec.template.spec.containers.[].livenessProbe,
        .spec.template.spec.containers.[].readinessProbe,
        .spec.template.spec.containers.[].terminationMessagePath,
        .spec.template.spec.containers.[].terminationMessagePolicy,
        .spec.template.spec.dnsPolicy,
        .spec.template.spec.restartPolicy,
        .spec.template.spec.schedulerName,
        .spec.template.spec.terminationGracePerionSeconds,
        .spec.clusterIP,
        .spec.clusterIPs,
        .spec.internalTrafficPolicy,
        .spec.ipFamilies,
        .spec.ipFamilyPolicy,
        .spec.sessionAffinity,
        .metadata.resourceVersion,
        .status)' -
}

get_images() {
    # list initContainers for pod
    count=0
    imgname=$(kubectl get pod $namespace $1 -o jsonpath='{.spec.initContainers[*].name}')
    printf "\n  initContainers: \n"
    for i in $imgname; do
        img=$(kubectl get pod $namespace $1 -o jsonpath="{.spec.initContainers[${count}].image}")
        printf "    ${i}: ${img}\n"
        count=$((count+1))
    done
    # list containers for pod
    count=0
    imgname=$(kubectl get pod $namespace $1 -o jsonpath='{.spec.containers[*].name}')
    printf "\n  containers: \n"
    for i in $imgname; do
        img=$(kubectl get pod $namespace $1 -o jsonpath="{.spec.containers[${count}].image}")
        printf "    ${i}: ${img}\n"
        count=$((count+1))
    done
    echo ""
}

images() {
    echo ""
    if [[ "$(kubectl get pod $namespace $1 -o jsonpath='{.kind}')" == "List" ]]; then
        # handle list of pods
        podnames=$(kubectl get pod $namespace -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name --no-headers)
        echo "$podnames" | while IFS= read -r i; do
            namespace="-n $(echo $i | awk '{print $1}')"
            pod=$(echo $i | awk '{print $2}')
            echo "$pod (${namespace}):"
            get_images $pod
        done
    else
        # handle individual pod
        image=$(kubectl get pod $namespace $1 -o custom-columns=NAME:.metadata.name --no-headers)
        echo $image
        get_images $image
    fi
}

namespace() {
    # determine namespace separately so it can go anywhere in user input like kubectl
    while [[ $# -gt 0 ]]
    do
        case "$1" in
        -n|--namespace)
            export namespace="--namespace ${2}"
            ;;
        -A|--all-namespaces)
            export namespace="--all-namespaces"
            ;;
        esac
        shift
    done
}

# CLI Flags
flags()
{
    while [[ $# -gt 0 ]]
    do
        case "$1" in
        -n|--namespace)
            # just to not trip help since namespace is handled separately
            ;;
        -A|--all-namespaces)
            # just to not trip help since namespace is handled separately
            ;;
        get)
            if [[ "$*" == *"-o yaml"* || "$*" == *"-oyaml"* ]]; then
                # TODO error handling for yq dependency
                decode "$@"
                neat "$@"
            else
                kubectl "$@"
            fi
            exit 0
            ;;
        healthcheck|health)
            healthcheck
            ;;
        image|images)
            if [[ "${2}" == "-n" || "${2}" == "--namespace" ]]; then
                images $4
            else
                images $2
            fi
            exit 0
            ;;
        create|apply|inspect)
            kubectl "$@"
            exit 0
            ;;
        -h|--help)
            cli_help
            ;;
        -*)
            cli_help
            ;;
        esac
        shift
    done

    # TODO add preflight check for k8s access

    # TODO add function to verify kubectl and api versions

    # if no option chosen
    cli_help
}
namespace "$@"
flags "$@"